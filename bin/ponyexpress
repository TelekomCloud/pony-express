#!/usr/bin/env python

# ponyexpress
import os.path
import sys

sys.path.append(os.path.join(os.path.abspath(os.path.dirname(__file__)), '..'))

from flask.ext.script import Manager
from flask.ext.migrate import Migrate, MigrateCommand

import json

from ponyexpress import create_app
from ponyexpress.database import db

from ponyexpress.api.lib.mirrors import Mirrors
from ponyexpress.api.lib.package_import import PackageImport

from ponyexpress.models.mirror import Mirror

##
# Create ponyexpress app object
##
app = create_app()

manager = Manager(app)

migrate = Migrate(app, db)

manager.add_command('db', MigrateCommand)

@manager.command
def import_testdata():

    with app.app_context():
        db.create_all()
        mirrors = Mirrors()

        mirror = Mirror()
        mirror.provider = 'apt'
        mirror.name = 'Test'
        mirror.uri = 'http://de.archive.ubuntu.com/ubuntu/dists/precise/main/binary-amd64/Packages.gz'
        mirror.label = 'Test'

        db.session.add(mirror)
        db.session.commit()

        path = os.path.dirname(__file__)
        datafile = os.path.join(path, '../ponyexpress/tests/data/install_tiny.txt')

        json_data = open(datafile)
        data_install = json.load(json_data)
        json_data.close()

        test_importer = PackageImport()
        test_importer.process_node_info(data_install)

        mirrors.update_mirror(mirror)

        #packages = self.mirrors.get_outdated_packages('ponyexpress', mirror)

if __name__ == "__main__":
    manager.run()
